import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * https://www.hackerrank.com/challenges/equal-stacks/problem?
     * Complete the 'equalStacks' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY h1
     *  2. INTEGER_ARRAY h2
     *  3. INTEGER_ARRAY h3
     */

    public static int equalStacks(List<Integer> h1, List<Integer> h2, List<Integer> h3) {
        if(h1 == null || h2 == null || h3==null)
            return 0;
        int[] heights = new int[3];
        heights[0] = h1.stream().mapToInt(x->x).sum();
        heights[1]= h2.stream().mapToInt(x->x).sum();
        heights[2]= h3.stream().mapToInt(x->x).sum();
            
        
        while( h1.size()>0 && h2.size()>0 && h3.size()>0 ){
            System.out.println(heights[0] + "- " + heights[1]+ "-" + heights[2]);
            System.out.println(heights[0]==heights[2]);
            //all of them are the same height
            if(heights[0] == heights[1] && heights[1] == heights[2])
                return heights[0];
            //find tallest tower
            if(heights[0] > heights[1] && heights[0] > heights[2]){
                    heights[0] -= h1.remove(0);
            } else if (heights[1] > heights[0] && heights[1] > heights[2]){ 
                heights[1]-= h2.remove(0);
            } else if (heights[2] > heights[0] && heights[2] > heights[1]) { 
                heights[2]-= h3.remove(0); 
            } 
            else if (heights[0] == heights[1]) {
                if(h1.get(0)<h2.get(0))
                    heights[0]-= h1.remove(0);
                else
                    heights[1]-= h2.remove(0);
            } 
            else if (heights[1] == heights[2]) {
                if(h2.get(0)<h3.get(0))
                    heights[1]-= h2.remove(0);
                else
                    heights[2]-= h3.remove(0);
            }
            else if (heights[0]==heights[2]) {
                System.out.println("here");
                if(h1.get(0)<h3.get(0))
                    heights[0]-= h1.remove(0);
                else
                    heights[2]-= h3.remove(0);
            }          
                
            //remove one from the tallest tower
        }
         
        
    // Write your code here
        return 0;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n1 = Integer.parseInt(firstMultipleInput[0]);

        int n2 = Integer.parseInt(firstMultipleInput[1]);

        int n3 = Integer.parseInt(firstMultipleInput[2]);

        List<Integer> h1 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h2 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h3 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.equalStacks(h1, h2, h3);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
